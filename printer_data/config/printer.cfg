################################################################
##        Ender 3 Max with SKR Mini E3 V3 and BLTouch          #
################################################################

[virtual_sdcard]
path: ~/gcode_files

# Enable object exclusion
[exclude_object]

[include Adaptive_Mesh.cfg]
#[include KAMP_Settings.cfg]
#[include adxl.cfg] # Comment this out when you disconnect the accelerometer

[stepper_x]
step_pin: PB13
dir_pin: !PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 39.900
endstop_pin: ^PC0
position_endstop: 0
position_max: 300
homing_speed: 50

[tmc2209 stepper_x]
uart_pin: PC11
tx_pin: PC10
uart_address: 0
run_current: 0.7
hold_current: 0.42
#stealthchop_threshold: 9999

[stepper_y]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 39.850
endstop_pin: ^PC1
position_endstop: 0
position_max: 300
homing_speed: 50

[tmc2209 stepper_y]
uart_pin: PC11
tx_pin: PC10
uart_address: 2
run_current: 1.4 #1.6 #0.680
hold_current: 0.93
#stealthchop_threshold: 9999

[stepper_z]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 8.020
endstop_pin: probe:z_virtual_endstop
position_max: 340
position_min: -2

[tmc2209 stepper_z]
uart_pin: PC11
tx_pin: PC10
uart_address: 1
run_current: 1.2
hold_current: 0.71
#stealthchop_threshold: 9999

#[bltouch] 
#sensor_pin: ^PC14
#control_pin: PA1
#probe_with_touch_mode: False
#x_offset: 50  # modify as needed for bltouch location
#y_offset: -8  # modify as needed for bltouch location
#speed: 20     # Ajusta la velocidad de la sonda
#samples: 1    # Reduce el número de muestras
#sample_retract_dist: 2.5  # Reduce la distancia de retractación
#lift_speed: 60  # Aumenta la velocidad de levantamiento
#samples_tolerance_retries: 1  # Reduce los reintentos

[safe_z_home]
home_xy_position: 150,150            # Change coordinates to the center of your print bed
speed: 50
z_hop: 10                            # Move up 10mm
z_hop_speed: 5

#[bed_mesh]                            # enable for BLTouch
#speed: 150
#mesh_min: 50, 0
#mesh_max: 290, 290
#algorithm: bicubic
#probe_count: 30,30                      # 49 points due to large bed size
#horizontal_move_z: 5

#[screws_tilt_adjust]
#horizontal_move_z: 10
#screw1: 0,285
#screw1_name: back left
#screw2: 223,285
#screw2_name: back right
#screw3: 0,44
#screw3_name: front left
#screw4: 223,44
#screw4_name: front right

[bed_screws]
screw1: 35, 35
screw2: 275, 35
screw3: 35, 275
screw4: 275, 275

[extruder]
step_pin: PB3
dir_pin: !PB4
enable_pin: !PD1
microsteps: 16
rotation_distance: 7.3480212         # See below section for rotation_distance adjustment procedure
nozzle_diameter: 0.400
filament_diameter: 1.750
pressure_advance = 0.5406                # Tune pressure advance AFTER resonance tuning
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
#control: pid
#pid_Kp: 26.399
#pid_Ki: 1.491
#pid_Kd: 116.816
min_temp: 0
max_temp: 300
max_extrude_only_distance: 700.0

### To tune extruder step_distance:
## mark 120mm from extruder entrance
## M83
## G1 E100 F100
## ((120 - measured) / 100) * current_step_distance

[tmc2209 extruder]
uart_pin: PC11
tx_pin: PC10
uart_address: 3
run_current: 0.7
#stealthchop_threshold: 999999

#[filament_switch_sensor my_sensor] #Sensor original 
#pause_on_runout: True
#runout_gcode: UNLOAD
#insert_gcode: LOAD
#event_delay: 5.0
#pause_delay: 0.5
#switch_pin: PC15

[filament_switch_sensor switch_sensor] #Sensor BBT SFS V2
switch_pin: ^PC12 # as shown in Figure 2, switch sensor IO is PA0
pause_on_runout: False
runout_gcode:
  PAUSE #[pause_resume] is required in printer.cfg
  M117 F switch runout
insert_gcode:
  M117 F switch inserted

[filament_motion_sensor encoder_sensor] #Sensor BBT SFS V2
switch_pin: ^PC15 # as shown in Figure 2, motion sensor IO is PC2
detection_length: 4.88 # accuracy of motion sensor 2.88mmextruder: extruder
extruder: extruder
pause_on_runout: False
runout_gcode:
  PAUSE # [pause_resume] is required in printer.cfg
  M117 F encoder runout
insert_gcode:
  M117 F encoder inserted

[heater_bed]
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F 
sensor_pin: PC4
#control: pid
#pid_Kp: 70.997
#pid_Ki: 1.174
#pid_Kd: 1072.948
min_temp: 0
max_temp: 130

[heater_fan nozzle_cooling_fan] #FAN1
pin: PC7

#[controller_fan stepper_fan] #FAN2 
[heater_fan controller_fan]
pin: PB15
#idle_timeout: 30
#stepper: stepper_x,stepper_y,stepper_z
heater: heater_bed         
heater_temp: 45.0          

[fan]   #FAN0
pin: PC6

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[mcu] 
serial: /dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.1:1.0  # Enter your MCU serial, not this one

[printer]
kinematics: cartesian
max_velocity: 500
max_accel: 2200 #7000 valor anterior
square_corner_velocity: 5
minimum_cruise_ratio: 0.5
max_z_velocity: 5
max_z_accel: 100


[input_shaper]
shaper_freq_x: 76.6
shaper_type_x: mzv
shaper_freq_y: 27.6
shaper_type_y: mzv

###### Uncomment for resonance tuning with ADXL (After software setup) ######

#[mcu rpi]
#serial: /tmp/klipper_host_mcu

#[adxl345]
#cs_pin: rpi:None

#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#    150, 150, 10  # an example

#[mcu rpi]
#serial: /tmp/klipper_host_mcu

#[mpu9250]
#i2c_mcu: rpi
#i2c_bus: i2c.1

#[resonance_tester]
#accel_chip: mpu9250
#probe_points:
#    100, 100, 20  # an example

[board_pins]
aliases:
    EXP1_1=PB5,  EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PA15, EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PD6, EXP1_10=<5V>

[display]
lcd_type: st7920
cs_pin: EXP1_7
sclk_pin: EXP1_6
sid_pin: EXP1_8
encoder_pins: ^EXP1_5, ^EXP1_3
click_pin: ^!EXP1_2

[output_pin beeper]
pin: PB5
#pwm: True
#value: 0 #   Silent at power on
#shutdown_value: 0 #   Disable at emergency shutdown
#cycle_time: 0.001

#[include adxl.cfg]

# The MCU section only applies to the Eddy USB. For Eddy Coil you will use the MCU name of the toolboard that you connected the Eddy Coil to.
[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_5044466778DE4D1C-if00 # This is the serial address of your eddy probe. This can be found by using the terminal of your klipper instance (typically through SSH) and using the command ```ls /dev/serial/by-id``` 
restart_method: command
#Did you read all of the comments before the macros? Make sure that you do and then uncomment the ones that you need. Remove this line when you are done.

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu # Sets the type of sensor for Klipper to read
sensor_mcu: eddy # Sets the MCU of the eddy probe tempereature sensor
min_temp: 10 # Sets the minimum tempereature for eddys tempereature sensor to operate
max_temp: 100 # Sets the maximum tempereature for eddys tempereature sensor to operate

[probe_eddy_current btt_eddy]
sensor_type: ldc1612
z_offset: 2.1
#i2c_address:
i2c_mcu: eddy  # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the MCU you have used.
i2c_bus: i2c0f # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the I2C bus you have used.
# Measure the offsets below using the method described here: https://www.klipper3d.org/Probe_Calibrate.html#calibrating-probe-x-and-y-offsets
# For a standard Voron stealthburner X carriage mount there should be no need to change the defaults below.
x_offset: 50
y_offset: 5

# This section is only relevant for Eddy USB. Comment it out for Eddy Coil.
[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26
horizontal_move_z: 2.1

[bed_mesh]
horizontal_move_z: 2.1
speed: 200
# For the mesh dimensions below, the coordinates need to be reachable by the center of the probe. To calculate coordinates that will work, use the formula below:
# mesh x min = position_min_x + greater_of (15mm or x_offset) <--- in this term, only consider the x offset if it is positive, ignore if negative.
# mesh y min = position_min_y + greater_of (15mm or y_offset) <--- in this term, only consider the y offset if it is positive, ignore if negative.
# mesh x max = position_max_x - greater_of (15mm or |x_offset|) <--- in this term, only consider the x offset if it is negative, ignore if positive.
# mesh y max = position_max_y - greater_of (15mm or |y_offset|) <--- in this term, only consider the y offset if it is negative, ignore if positive.
# Example: Consider that you have a 300 x 300 bed with the max x and y positions being 300 and the min being 0. Your probe offsets are -20 for X and 10 for Y
# For mesh x min we ignore the x offset term because it is negative. Therefore mesh x min = 15
# For mesh y min we do not ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y min = 15
# For mesh x max we do not ignore the x offset term because it is negative. It is also greater than 15. Therefore mesh x max = 280
# For mesh y max we ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y max = 285
# The final result would be mesh_min: 15, 15 mesh_max: 280, 285
mesh_min: 55, 20  # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
mesh_max: 290, 290 # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
probe_count: 15, 15
algorithm: bicubic
scan_overshoot: 8  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[safe_z_home]
home_xy_position: 150, 150 # Choose an X,Y position that is in the center of your bed. For a 300x300 machine that will be 150, 150. Use the same principle to calculate your bed center.
z_hop: 5
z_hop_speed: 25
speed: 300


################################################################
##                           Macros                            #
################################################################

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max position from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro G29]
gcode:
    BED_MESH_CALIBRATE

[gcode_macro M600]
gcode:
    PAUSE
    UNLOAD

[gcode_macro UNLOAD_FILAMENT]
gcode:
    M83                   # Put the extruder into relative mode
    G92 E0.0              # Reset the extruder so that it thinks it is at position zero
    G1 E-700 F700          # Move the extruder forward 120mm at a speed of 350mm/minute
    G92 E0.0              # Reset the extruder again
    M82                   # Put the extruder back into absolute mode.

[gcode_macro LOAD_FILAMENT]
gcode:
    G1 Z50 F240
    G1 X2 Y10 F3000
    M83                   # Put the extruder into relative mode
    G92 E0.0              # Reset the extruder so that it thinks it is at position zero
    G1 E500 F700          # Move the extruder forward 120mm at a speed of 350mm/minute
    G92 E0.0              # Reset the extruder again
    M82                   # Put the extruder back into absolute mode.

[gcode_macro PURGE]
gcode:
    G91
    G1 E100 F5
    G90

[gcode_macro CALIBRAR_Z_OFFSET]
gcode:
    G28
    PROBE_CALIBRATE

[gcode_macro LEVEL_BED]
gcode:
    G28
    BED_SCREWS_ADJUST

[gcode_macro SALVAR_CONFIG]
gcode:
    SAVE_CONFIG

# Below three POWER_OFF_PRINTER, DELAYED_PRINTER_OFF, AND IDLE_TIMEOUT all for use with WIFI power plug 
# (I use Kasa H103) which needs to be configured in Moonraker.cfg.  Using Cura2Moonraker plugin you
# can turn on printer when print sent from Cura.  My Moonraker.cfg power plug setting follows:

 #[power Green Max_Power]               # Rename macro to your liking
 #type: tplink_smartplug
 #address: 192.168.1.146                # Enter your Kasa power plug local IP here
 #on_when_job_queued: True
 #locked_while_printing: False
 #restart_klipper_when_powered: True
 #bound_service: klipper
 #off_when_shutdown: True
 #off_when_shutdown_delay: 60          # Turn off printer 180 seconds after print completion, change as desired


#[gcode_macro POWER_OFF_PRINTER]  
#gcode:
#  {action_call_remote_method("set_device_power",
#                             device="Green Max_Power",  # Enter your power plug name here
#                             state="off")}

[delayed_gcode delayed_printer_off]
initial_duration: 180                   # Turns off printer after 180 seconds idle, change as desired
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

[idle_timeout]
gcode:
  M84
  TURN_OFF_HEATERS
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=180  # Turns off printer after 180 seconds idle, change as desired

[gcode_macro M300]
gcode:
    {% set S = params.S|default(1000)|int %}
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=beeper VALUE={S}
    G4 P{P}
    SET_PIN PIN=beeper VALUE=0

[gcode_macro LOAD_MESH]
gcode:
    BED_MESH_PROFILE LOAD=default

###################################MACROS DE EDDY###################################
#This secton contains macros and related config sections. Some should be used, others are optional. Read the comment above each one to find out whether or not to uncomment it for your installation.


# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
#[save_variables]
#filename: ~/printer_data/config/variables.cfg



# Uncomment this if you are using Eddy as the probe AND the homing endstop
[force_move]
enable_force_move: True # Allows a user to move the z axis down if they have no other means of homing Z and need to calibrate the Eddy.



# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[delayed_gcode RESTORE_PROBE_OFFSET]
initial_duration: 1.
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if not printer["gcode_macro SET_GCODE_OFFSET"].restored %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ svv.nvm_offset|default(0) }
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=restored VALUE=True
  {% endif %}



# Uncomment this if you are using Eddy as the probe AND the homing endstop
# Take note of the lines that should only be used if you have a KNOMI installed.
[gcode_macro G28]
rename_existing: G28.1
gcode:
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=True # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg
  G28.1 {rawparams}
  {% if not rawparams or (rawparams and 'Z' in rawparams) %}
    PROBE
    SET_Z_FROM_PROBE
  {% endif %}
  #SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=homing VALUE=False # Uncomment this if using a KNOMI and then remove the G28 macro from the KNOMI.cfg



# Uncomment this if you are using Eddy as the probe AND the homing endstop
[gcode_macro SET_Z_FROM_PROBE]
gcode:
    {% set cf = printer.configfile.settings %}
    SET_GCODE_OFFSET_ORIG Z={printer.probe.last_z_result - cf['probe_eddy_current btt_eddy'].z_offset + printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset}
    G90
    G1 Z{cf.safe_z_home.z_hop}


# Uncomment this if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: Z_OFFSET_APPLY_PROBE_ORIG
gcode:
  SAVE_VARIABLE VARIABLE=nvm_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset }



# Uncomment the lines in this macro if you are using Eddy as the probe AND the homing endstop AND would like to use the beta z-offset control
[gcode_macro SET_GCODE_OFFSET]
rename_existing: SET_GCODE_OFFSET_ORIG
variable_restored: False  # Mark whether the var has been restored from NVM
variable_runtime_offset: 0
gcode:
  {% if params.Z_ADJUST %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE={ printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset + params.Z_ADJUST|float }
  {% endif %}
  {% if params.Z %} 
    {% set paramList = rawparams.split() %}
    {% for i in range(paramList|length) %}
      {% if paramList[i]=="Z=0" %}
        {% set temp=paramList.pop(i) %}
        {% set temp="Z_ADJUST=" + (-printer["gcode_macro SET_GCODE_OFFSET"].runtime_offset)|string %}
        {% if paramList.append(temp) %}{% endif %}
      {% endif %}
    {% endfor %}
    {% set rawparams=paramList|join(' ') %}
    SET_GCODE_VARIABLE MACRO=SET_GCODE_OFFSET VARIABLE=runtime_offset VALUE=0
  {% endif %}
  SET_GCODE_OFFSET_ORIG { rawparams }



# This macro automates a lot of the frequency mapping process and simplifies the steps significantly.
[gcode_macro PROBE_EDDY_CURRENT_CALIBRATE_AUTO]
gcode:
  BED_MESH_CLEAR
  G28 X Y
  G90 # Abs positioning
  G1 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } F6000
  {% if 'z' not in printer.toolhead.homed_axes %}
    SET_KINEMATIC_POSITION Z={ printer.toolhead.axis_maximum.z-1 } # Allows the user to work it down until it touches.
  {% endif %}
  PROBE_EDDY_CURRENT_CALIBRATE {rawparams}



#This macro is optional but useful if you want to run a rapid scan before each print. Simply uncomment it and add BED_MESH_SCAN to your print start code.
#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BTT_BED_MESH_CALIBRATE
#gcode:
#  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg
#  BTT_BED_MESH_CALIBRATE METHOD=rapid_scan
#  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False #Only uncomment this line if using a KNOMI and then remove the BED_MESH_CALIBRATE macro from KNOMI.cfg

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 30.272
#*# pid_ki = 2.147
#*# pid_kd = 106.708
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 66.943
#*# pid_ki = 0.840
#*# pid_kd = 1333.011
#*#
#*# [probe_eddy_current btt_eddy]
#*# reg_drive_current = 15
#*# calibrate =
#*# 	0.050125:3248965.112,0.090225:3248098.134,0.130325:3247213.084,
#*# 	0.170425:3246298.030,0.210525:3245443.860,0.250625:3244590.340,
#*# 	0.290725:3243737.982,0.330825:3242875.117,0.370925:3242044.712,
#*# 	0.411025:3241219.890,0.451125:3240384.355,0.491225:3239551.200,
#*# 	0.528819:3238789.165,0.568919:3238042.843,0.609019:3237229.512,
#*# 	0.649119:3236446.411,0.689219:3235659.251,0.729319:3234885.394,
#*# 	0.769419:3234159.136,0.809519:3233376.669,0.849619:3232647.428,
#*# 	0.889719:3231931.829,0.929819:3231195.243,0.969919:3230467.554,
#*# 	1.010019:3229802.122,1.050119:3229082.746,1.090219:3228412.196,
#*# 	1.130319:3227734.780,1.170419:3227074.763,1.210519:3226401.540,
#*# 	1.250619:3225763.811,1.290719:3225128.401,1.330819:3224463.591,
#*# 	1.370919:3223876.416,1.411019:3223212.104,1.451119:3222617.815,
#*# 	1.491219:3222035.941,1.528813:3221463.437,1.568913:3220908.117,
#*# 	1.609013:3220293.993,1.649113:3219734.227,1.689213:3219199.203,
#*# 	1.729313:3218653.234,1.769413:3218098.886,1.809513:3217561.312,
#*# 	1.849613:3217047.473,1.889713:3216556.789,1.929813:3216021.486,
#*# 	1.969913:3215534.336,2.010013:3215041.834,2.050113:3214557.057,
#*# 	2.090213:3214104.668,2.130313:3213645.186,2.170413:3213192.367,
#*# 	2.210513:3212726.015,2.250613:3212300.738,2.290713:3211841.801,
#*# 	2.330813:3211455.847,2.370913:3211013.773,2.411013:3210582.998,
#*# 	2.451113:3210192.066,2.491213:3209789.130,2.528806:3209419.403,
#*# 	2.568906:3209037.748,2.609006:3208681.700,2.649106:3208319.271,
#*# 	2.689206:3207931.545,2.729306:3207583.404,2.769406:3207234.364,
#*# 	2.809506:3206886.377,2.849606:3206555.327,2.889706:3206179.739,
#*# 	2.929806:3205847.470,2.969906:3205536.537,3.010006:3205218.002,
#*# 	3.050106:3204907.378,3.090206:3204592.309,3.130306:3204295.780,
#*# 	3.170406:3204015.640,3.210506:3203692.503,3.250606:3203410.057,
#*# 	3.290706:3203127.067,3.330806:3202855.049,3.370906:3202557.754,
#*# 	3.411006:3202282.543,3.451106:3202044.398,3.491206:3201746.848,
#*# 	3.528800:3201488.010,3.568900:3201243.947,3.609000:3200991.655,
#*# 	3.649100:3200763.753,3.689200:3200490.702,3.729300:3200244.073,
#*# 	3.769400:3200025.267,3.809500:3199776.270,3.849600:3199546.956,
#*# 	3.889700:3199315.023,3.929800:3199084.105,3.969900:3198870.635,
#*# 	4.010000:3198638.603,4.050100:3198424.723
#*#
#*# [temperature_probe btt_eddy]
#*# calibration_temp = 39.187936
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  0.388623, 0.351947, 0.311861, 0.282379, 0.245887, 0.187156, 0.165746, 0.163793, 0.185795, 0.199464, 0.212474, 0.218748, 0.296398, 0.483432, 0.506459
#*# 	  0.383389, 0.354044, 0.271720, 0.246819, 0.210659, 0.161723, 0.141328, 0.139023, 0.159371, 0.170962, 0.195346, 0.240078, 0.309704, 0.370933, 0.393094
#*# 	  0.328660, 0.296831, 0.213939, 0.189270, 0.158426, 0.104682, 0.081764, 0.081035, 0.101062, 0.110953, 0.130779, 0.178293, 0.241499, 0.302686, 0.331419
#*# 	  0.298867, 0.269478, 0.194970, 0.177076, 0.140285, 0.087441, 0.070997, 0.073555, 0.088011, 0.098282, 0.122487, 0.168297, 0.226009, 0.281556, 0.287853
#*# 	  0.270692, 0.233534, 0.156042, 0.134643, 0.093188, 0.041163, 0.022201, 0.025596, 0.040455, 0.051255, 0.073442, 0.120149, 0.183487, 0.238700, 0.245545
#*# 	  0.255595, 0.224012, 0.153060, 0.132904, 0.093851, 0.038428, 0.021734, 0.025597, 0.045366, 0.053461, 0.073908, 0.122165, 0.180095, 0.228030, 0.219479
#*# 	  0.231374, 0.201128, 0.121620, 0.101189, 0.060138, 0.010859, -0.013263, -0.010994, 0.010630, 0.022366, 0.040650, 0.086100, 0.151960, 0.197599, 0.200232
#*# 	  0.227518, 0.201294, 0.127588, 0.112913, 0.072577, 0.024306, 0.004659, 0.004694, 0.019496, 0.033605, 0.063234, 0.108953, 0.168041, 0.214287, 0.204934
#*# 	  0.223166, 0.189319, 0.111173, 0.094889, 0.054311, 0.005262, -0.020131, -0.019026, 0.001882, 0.018595, 0.045840, 0.094673, 0.159353, 0.209202, 0.219125
#*# 	  0.231847, 0.199706, 0.127014, 0.109091, 0.071215, 0.014951, 0.002392, 0.007300, 0.022732, 0.036281, 0.071447, 0.126520, 0.186095, 0.234473, 0.232278
#*# 	  0.239756, 0.196169, 0.122481, 0.101474, 0.064389, 0.010983, -0.006378, -0.006032, 0.016577, 0.031826, 0.062092, 0.116543, 0.183963, 0.242307, 0.253504
#*# 	  0.251967, 0.217702, 0.147126, 0.135148, 0.097721, 0.044050, 0.028274, 0.029764, 0.047676, 0.067908, 0.100864, 0.153782, 0.223097, 0.283424, 0.290144
#*# 	  0.276370, 0.235836, 0.157650, 0.140199, 0.105460, 0.047151, 0.031215, 0.030072, 0.054675, 0.074152, 0.103456, 0.163126, 0.242117, 0.307337, 0.337950
#*# 	  0.314553, 0.279338, 0.202057, 0.186721, 0.149802, 0.093260, 0.083653, 0.077775, 0.104600, 0.120096, 0.156079, 0.217057, 0.295557, 0.362785, 0.397274
#*# 	  0.366163, 0.317031, 0.231364, 0.209390, 0.172184, 0.115852, 0.099548, 0.092615, 0.122122, 0.140648, 0.175857, 0.243178, 0.329835, 0.413532, 0.471247
#*# x_count = 15
#*# y_count = 15
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 55.0
#*# max_x = 289.92
#*# min_y = 20.0
#*# max_y = 289.91999999999996
